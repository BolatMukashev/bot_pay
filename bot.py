from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import ChatNotFound, UserDeactivated, BotBlocked
from db_operations import *
from json_parser import parse_schools_from_object
from keyboards.inline.callback_datas import referral_button_call
from keyboards.inline.country import country_buttons
from keyboards.inline.language import language_buttons
from keyboards.inline.penalty_RU import penalty_buttons_ru_1
from keyboards.inline.penalty_KZ import penalty_buttons_kz_1
from keyboards.inline.penalty_RUSSIA import russian_penalty_titles
from messages import *
from gmail import send_emails_to_schools
import io
import asyncio
from pay_system_ioka import PayLinkIoka
from static.html_messages.hello_auto_school import hello_auto_school_message
from static.html_messages.new_functions_and_offers import new_func_and_offers_message
from tqdm import tqdm as loading_bar


token = config.TEST_BOT_TOKEN if config.DEBUG else config.BOT_TOKEN


bot = Bot(token=token, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())


class AllStates(StatesGroup):
    MessageForAll: State = State()
    SendPromotionalPost: State = State()
    UsePromoCode: State = State()
    DeleteAutoSchool: State = State()
    SendEmailToAllAutoSchools: State = State()
    InfoAboutUser: State = State()


@dp.message_handler(commands=["set_commands"], state="*")
async def command_set_commands(message: types.Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤ –±–æ–∫–æ–≤–æ–º –º–µ–Ω—é, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞"""
    user_id = message.from_user.id
    if user_id == config.ADMIN_ID:
        commands_list = ["set_commands", "set_commands_ru", "set_commands_kz"]
        for command in commands_list:
            descriptions = get_commands_descriptions_and_language_code(command)
            commands = [types.BotCommand(command="/question", description=descriptions['question']),
                        types.BotCommand(command="/penalty", description=descriptions['penalty']),
                        types.BotCommand(command="/pay", description=descriptions['pay']),
                        types.BotCommand(command="/promo_code", description=descriptions['promo_code']),
                        types.BotCommand(command="/promotions", description=descriptions['promotions']),
                        types.BotCommand(command="/certificate", description=descriptions['certificate']),
                        types.BotCommand(command="/donate", description=descriptions['donate']),
                        types.BotCommand(command="/chat", description=descriptions['chat']),
                        types.BotCommand(command="/error", description=descriptions['error']),
                        types.BotCommand(command="/language", description=descriptions['language']),
                        types.BotCommand(command="/country", description=descriptions['country']),
                        types.BotCommand(command="/info", description=descriptions['info'])]
            await bot.set_my_commands(commands=commands, language_code=descriptions['language_code'])
        await message.answer("–ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")


@dp.message_handler(commands=["start"])
async def command_start(message: types.Message):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–∑–æ–≤ –º–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    telegram_id = message.from_user.id
    full_name = message.from_user.full_name
    referral_telegram_id = message.get_args()

    up_daily_limit_to_referral(referral_telegram_id, telegram_id, 5)
    # check leavers and add to user and del in leaver
    if telegram_id not in get_all_leavers_telegram_id():
        add_user(telegram_id=telegram_id, full_name=full_name, referral=referral_telegram_id)
    await bot.send_sticker(telegram_id, STICKERS['hello'])
    await message.answer(MESSAGE['start_user_text'].format(full_name))
    if not get_user_registration_status(telegram_id):
        await message.answer(MESSAGE['language_choice'], reply_markup=language_buttons)


@dp.message_handler(commands=["question"])
async def command_question(message: types.Message):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –±–∞–∑—ã"""
    telegram_id = message.from_user.id
    user_language = get_user_language(telegram_id)
    if not user_time_limit_is_over(telegram_id):
        question = get_random_question(user_language)
        if config.DEBUG is False and question.image_code:
            await bot.send_photo(telegram_id, question.image_code)
        options = pickle.loads(question.all_answers)
        random.shuffle(options)
        correct_option_id = options.index(question.correct_answer)
        await bot.send_poll(telegram_id,
                            type='quiz',
                            is_anonymous=False,
                            is_closed=False,
                            question=question.question,
                            options=options,
                            correct_option_id=correct_option_id,
                            explanation=question.explanation)
    else:
        await bot.send_sticker(telegram_id, STICKERS['flower'])
        limit_error_message = MESSAGE[f'limit_error_{user_language}']
        await bot.send_message(telegram_id, limit_error_message)
    update_time_visit(telegram_id)


@dp.message_handler(commands=["language"])
async def command_language(message: types.Message):
    """–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—é —Å–º–µ–Ω—ã —è–∑—ã–∫–∞"""
    await message.answer(MESSAGE['language_choice'], reply_markup=language_buttons)


@dp.message_handler(commands=["country"])
async def command_country(message: types.Message):
    """–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—é —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω—ã"""
    telegram_id = message.from_user.id
    user_language = get_user_language(telegram_id)
    await message.answer(MESSAGE[f'country_choice_{user_language}'], reply_markup=country_buttons)


@dp.message_handler(commands=["chat"])
async def command_chat(message: types.Message):
    """–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç"""
    telegram_id = message.from_user.id
    user_language = get_user_language(telegram_id)
    await message.answer(MESSAGE[f'link_to_chat_{user_language}'])


@dp.message_handler(commands=["error"])
async def command_error(message: types.Message):
    """–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –æ—à–∏–±–æ–∫"""
    telegram_id = message.from_user.id
    user_language = get_user_language(telegram_id)
    await message.answer(MESSAGE[f'link_error_chat_{user_language}'])


@dp.message_handler(commands=["penalty"])
async def command_penalty(message: types.Message):
    """–†–∞–∑–¥–µ–ª —Å–æ —à—Ç—Ä–∞—Ñ–∞–º–∏. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —à—Ç—Ä–∞—Ñ—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    telegram_id = message.from_user.id
    user = get_user_by(telegram_id)
    language = user.language
    country = user.country
    if country == 'RU':
        data = get_data_from_json_file('backup/penalty_russia.json')
        await message.answer(data['title'], reply_markup=russian_penalty_titles)
    else:
        data = get_data_from_json_file(f'backup/penalty_kazakhstan_{language}.json')
        if language == 'RU':
            await message.answer(data['title'], reply_markup=penalty_buttons_ru_1)
        if language == 'KZ':
            await message.answer(data['title'], reply_markup=penalty_buttons_kz_1)


@dp.message_handler(commands=["statistics"])
async def command_statistics(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –ø—Ä–æ–º–æ-–∫–æ–¥–∞–º"""
    user_id = message.from_user.id
    if user_id == config.ADMIN_ID:
        result = get_big_statistics()
        await message.answer(result)


# –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å, –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –†—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Ç–¥–µ–ª—å–Ω–∞—è –¥–ª—è –ö–ó
@dp.message_handler(commands=["send_post_ru", "send_post_kz", "send_post_russia", "send_post_kazakhstan"], state='*')
async def command_send_post(message: types.Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º - —Ñ–æ—Ç–æ+–ø–æ–¥–ø–∏—Å—å"""
    telegram_id = message.from_user.id
    if telegram_id == config.ADMIN_ID:
        await message.answer('–û—Ç–ø—Ä–∞–≤—å —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Ñ–æ—Ç–æ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!')
        await AllStates.SendPromotionalPost.set()
        await state.update_data(location=message.text)


@dp.message_handler(state=AllStates.SendPromotionalPost, content_types=['text', 'photo'])
async def command_send_post_action(message: types.Message, state: FSMContext):
    photo_id = message.photo[0].file_id
    caption = message.caption
    await state.update_data(photo_id=photo_id)
    data = await state.get_data()
    comm = data['location']
    await state.finish()
    users_language, user_country = filter_telegram_id(comm)
    users = get_all_users_telegram_id(language=users_language, country=user_country)
    no_active_users = 0
    for user_id in loading_bar(users):
        try:
            await bot.send_photo(user_id, photo_id, caption=caption)
        except (ChatNotFound, UserDeactivated, BotBlocked):
            no_active_users += 1
        except Exception as exx:
            await bot.send_message(config.ADMIN_ID, str(exx))
    await bot.send_message(config.ADMIN_ID, f'–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–æ {len(users) - no_active_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚úåüèª\n'
                                            f'–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–æ {no_active_users}\n'
                                            f'–í—Å–µ–≥–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')


@dp.message_handler(commands=["promo_code"], state='*')
async def command_promo_code(message: types.Message):
    """
    –†–∞–∑–¥–µ–ª —Å –ü—Ä–æ–º–æ-–∫–æ–¥–∞–º–∏. –¢—É—Ç –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –ø–æ–ª—É—á–∏—Ç—å +3 –¥–Ω—è –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ –∏
    —Å–∫–∏–¥–∫—É 50% –Ω–∞ –ø–æ–∫—É–ø–∫—É –≥–æ–¥–æ–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    """
    telegram_id = message.from_user.id
    user = get_user_by(telegram_id)
    language = user.language
    user_promo_code_used_status = user.promo_code_used
    if not user_promo_code_used_status:
        await message.answer(PROMO_CODE[f'promo_code_command_text_{language}'])
        await AllStates.UsePromoCode.set()
    else:
        await message.answer_sticker(STICKERS['NO'])
        await message.answer(PROMO_CODE[f'promo_code_was_used_{language}'])


@dp.message_handler(state=AllStates.UsePromoCode, content_types=types.ContentTypes.TEXT)
async def command_promo_code_action(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id
    language = get_user_language(telegram_id)
    user_promo_code = message.text.upper()
    await state.update_data(user_promo_code=user_promo_code)
    promo_codes = get_all_promo_codes()
    if user_promo_code in promo_codes:
        up_user_time_limit_days(telegram_id, 5)
        up_number_of_references(user_promo_code)
        update_user_promo_code_used_status(telegram_id)
        commit_use_promo_code(telegram_id, user_promo_code)
        change_price_in_rubles_on_user(telegram_id, config.PRICE_AFTER_20DAYS)
        await message.answer_sticker(STICKERS['all_good'])
        await message.answer(PROMO_CODE[f'promo_code_activated_{language}'])
    else:
        await message.answer_sticker(STICKERS['NO'])
        await message.answer(PROMO_CODE[f'promo_code_error_{language}'])
    await state.finish()


@dp.message_handler(commands=["pay"])
async def command_pay(message: types.Message):
    """
    –†–∞–∑–¥–µ–ª –û–ø–ª–∞—Ç—ã.
    –ö–æ–º–∞–Ω–¥–∞ pay –ø–æ—Å—ã–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É, –ø–æ–ª—É—á–∞–µ—Ç –≤ –æ—Ç–≤–µ—Ç –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç —ç—Ç—É —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
    –∫–ª–∏–µ–Ω—Ç—É
    """
    telegram_id = message.from_user.id
    user = get_user_by(telegram_id)
    pay_data = PayData(user.country, user.language, user.price_in_rubles)
    pay_link = PayLinkIoka(telegram_id=telegram_id, price=pay_data.price_tenge, currency=pay_data.code,
                           name=user.full_name)
    url = pay_link.get_pay_url()

    markup = types.InlineKeyboardMarkup()
    pay_button = BUTTONS[f'pay_{user.language}']
    pay_link = types.InlineKeyboardButton(text=pay_button, url=url)
    markup.add(pay_link)

    await message.answer(pay_data.message_text, reply_markup=markup)

    await send_pay_access_message(telegram_id, user.language, 20)


async def send_pay_access_message(telegram_id: int, user_language: str, time_limit: int) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—Ä–µ–º–µ–Ω–∏ (time_limit)
    :param user_language: —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param time_limit: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç, –≤ —Ç–µ—á–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä—ã—Ö —Å—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
    :param telegram_id: id –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞
    """
    time_stop = datetime.now() + timedelta(minutes=time_limit)
    while True:
        await asyncio.sleep(10)
        time_now = datetime.now()
        status = await check_pay_status(telegram_id, user_language)
        if status or time_now > time_stop:
            break


async def check_pay_status(telegram_id: int, user_language: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    :param user_language: —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param telegram_id: id –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞
    :return: True –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞
    """
    pay_order = check_pay_order(telegram_id)
    if pay_order is not None:
        if pay_order[-1].date.date() == datetime.now().date():
            text = MESSAGE.get(f'pay_registered_message_{user_language}').format(pay_order[-1].order_number)
            await bot.send_message(telegram_id, text)
            return True


@dp.message_handler(commands=["promotions"])
async def command_promotions(message: types.Message):
    """–†–∞–∑–¥–µ–ª —Å –∞–∫—Ü–∏—è–º–∏ –∏ —Å–∫–∏–¥–∫–∞–º–∏. –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ 1 –∞–∫—Ü–∏—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∫–æ–π"""
    telegram_id = message.from_user.id
    user_language = get_user_language(telegram_id)
    image_code = IMAGES['100friends']

    markup = types.InlineKeyboardMarkup()
    button_text = BUTTONS[f'do_it_{user_language}']
    ref_link = types.InlineKeyboardButton(text=button_text,
                                          callback_data=referral_button_call.new(referral='100friends',
                                                                                 value=user_language))
    markup.add(ref_link)

    if not config.DEBUG:
        await bot.send_photo(telegram_id, image_code)
    await message.answer(PROMOTIONS[f'100friends_{user_language}'], reply_markup=markup)


@dp.message_handler(commands=["info"])
async def command_help(message: types.Message):
    """–†–∞–∑–¥–µ–ª –ò–Ω—Ñ–æ –æ –±–æ—Ç–µ"""
    telegram_id = message.from_user.id
    user_language = get_user_language(telegram_id)
    await message.answer_sticker(STICKERS['message'])
    await message.answer(MESSAGE[f'info_{user_language}'])
    if telegram_id == config.ADMIN_ID:
        await message.answer(MESSAGE['start_admin_text'])


@dp.message_handler(commands=["up_admin_time_limit"])
async def command_up_admin_q_a(message: types.Message):
    """–î–æ–±–∞–≤–∏—Ç—å 3 –º–∏–Ω—É—Ç—ã –∫ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω—É, –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    user_id = message.from_user.id
    if user_id == config.ADMIN_ID:
        up_admin_time_limit_3minute()
        await message.answer('+3 –º–∏–Ω—É—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–æ')


@dp.message_handler(commands=["up_time_limit_for_all_at_days_03", "up_time_limit_for_all_at_days_30"])
async def command_up_time_limit_for_all_at_n_day(message: types.Message):
    """
    –î–æ–±–∞–≤–∏—Ç—å +n –¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    –ê–∫—Ü–∏—è –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫ –∏–ª–∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∑–∞ —Ä–µ–º–æ–Ω—Ç
    """
    telegram_id = message.from_user.id
    if telegram_id == config.ADMIN_ID:
        days = int(message.text[-2:])
        up_all_user_time_limit(days=days)
        await message.answer(f'+{days} –¥–Ω–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–û!')


@dp.message_handler(commands=["set_50_percent_price_for_losers"])
async def command_set_50_percent_price_for_losers(message: types.Message):
    """–°–¥–µ–ª–∞—Ç—å 50% —Å–∫–∏–¥–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É –≥–æ–¥–æ–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ª—É–∑–µ—Ä–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç"""
    user_id = message.from_user.id
    if user_id == config.ADMIN_ID:
        losers = get_losers()
        set_50_percent_price_for_losers()
        no_active_users = 0
        for user in loading_bar(losers):
            try:
                await bot.send_photo(user['telegram_id'],
                                     IMAGES['50percent'],
                                     caption=OFFERS[f'second_week_promotional_offer_{user["language"]}'])
            except (ChatNotFound, UserDeactivated, BotBlocked):
                no_active_users += 1
            except Exception as exx:
                await bot.send_message(config.ADMIN_ID, str(exx))
        await bot.send_message(config.ADMIN_ID, '50% —Å–∫–∏–¥–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ‚úåüèª\n'
                                                f'–û–ø–æ–≤–µ—â–µ–Ω—ã {len(losers) - no_active_users} –∏–∑ {len(losers)}')


@dp.poll_answer_handler()
async def handle_poll_answer(quiz_answer: types.PollAnswer):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å"""
    telegram_id = quiz_answer.user.id
    user_language = get_user_language(telegram_id)
    if not user_time_limit_is_over(telegram_id):
        question = get_random_question(user_language)
        if config.DEBUG is False and question.image_code:
            await bot.send_photo(telegram_id, question.image_code)
        options = pickle.loads(question.all_answers)
        random.shuffle(options)
        correct_option_id = options.index(question.correct_answer)
        await quiz_answer.bot.send_poll(telegram_id,
                                        type='quiz',
                                        is_anonymous=False,
                                        is_closed=False,
                                        question=question.question,
                                        options=options,
                                        correct_option_id=correct_option_id,
                                        explanation=question.explanation)
    else:
        await bot.send_sticker(telegram_id, STICKERS['flower'])
        limit_error_message = MESSAGE[f'limit_error_{user_language}']
        await bot.send_message(telegram_id, limit_error_message)
    update_time_visit(telegram_id)


# –ê–í–¢–û–®–ö–û–õ–´ -----------------------------------------------------------------------------------------------------------


@dp.message_handler(commands=["send_hello_emails_to_new_schools"])
async def command_send_hello_emails_to_new_schools(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ email —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤—ã–º –∞–≤—Ç–æ—à–∫–æ–ª–∞–º"""
    telegram_id = message.from_user.id
    if telegram_id == config.ADMIN_ID:
        schools = get_not_notified_auto_schools()
        for school in schools:
            school_id = school.id
            secret_key = school.secret_key
            emails = pickle.loads(school.emails)
            sub_title = '–ù–æ–≤–∞—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞'
            html = hello_auto_school_message(secret_key)
            send_emails_to_schools(emails, sub_title, html)
            edit_notified_status(school_id)
        await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ—à–∫–æ–ª–∞–º –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!')


@dp.message_handler(commands=["send_email_for_all_auto_schools"], state='*')
async def command_send_email_for_all_auto_schools(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å email —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–≤—Ç–æ—à–∫–æ–ª–∞–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –∏–ª–∏ –ø–æ–ª–∏—Ç–∏–∫–∏"""
    user_id = message.from_user.id
    if user_id == config.ADMIN_ID:
        await message.answer('–ü–∏—à–∏ —Ç–µ–∫—Å—Ç.\n'
                             '–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ –≤ HTML –∫–æ–¥ –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ê–≤—Ç–æ—à–∫–æ–ª–∞–º!')
        await AllStates.SendEmailToAllAutoSchools.set()


@dp.message_handler(state=AllStates.SendEmailToAllAutoSchools, content_types=types.ContentTypes.TEXT)
async def command_send_email_for_all_auto_schools_action(message: types.Message, state: FSMContext):
    my_message = message.text
    await state.update_data(my_message=my_message)
    auto_schools = get_all_auto_schools_on_db()
    emails = get_auto_schools_emails(auto_schools)
    message_subtitle = '–ü—Ä–æ–∏–∑–æ—à–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è'
    html = new_func_and_offers_message(my_message)
    send_emails_to_schools(emails, message_subtitle, html)
    await message.answer('–°–æ–æ–±—â–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ—à–∫–æ–ª–∞–º! ‚úÖ')
    await state.finish()


@dp.message_handler(commands=["delete_auto_school"], state='*')
async def command_delete_auto_school(message: types.Message):
    """–£–¥–∞–ª–∏—Ç—å –ê–≤—Ç–æ—à–∫–æ–ª—É –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    user_id = message.from_user.id
    if user_id == config.ADMIN_ID:
        await message.answer('–ù–∞–ø–∏—à–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∞–≤—Ç–æ—à–∫–æ–ª—ã:')
        await AllStates.DeleteAutoSchool.set()


@dp.message_handler(state=AllStates.DeleteAutoSchool, content_types=types.ContentTypes.TEXT)
async def command_delete_auto_school_action(message: types.Message, state: FSMContext):
    secret_key = message.text
    await state.update_data(secret_key=secret_key)
    delete_auto_school_by(secret_key)
    await message.answer('–ê–≤—Ç–æ—à–∫–æ–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã!')
    await state.finish()


# –û–°–¢–ê–õ–¨–ù–û–ï -----------------------------------------------------------------------------------------------------------


# –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Å–µ—Ä –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –æ—Ç Pydantic
@dp.message_handler(content_types=['document'])
async def scan_message(message: types.Message):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON —Ñ–∞–π–ª, —Ä–∞—Å–ø–∞—Ä—Å–∏–≤–∞–µ—Ç –µ–≥–æ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—à–∫–æ–ª–∞—Ö –≤ –±–∞–∑—É"""
    telegram_id = message.from_user.id
    if telegram_id == config.ADMIN_ID:
        document_id = message.document.file_id
        file_address = await bot.download_file_by_id(document_id)
        file_data = json.load(io.TextIOWrapper(file_address, encoding='utf-8'))
        file_data = parse_schools_from_object(file_data)
        try:
            add_new_auto_schools(file_data)
            await message.answer('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—à–∫–æ–ª–∞—Ö –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É...')
        except KeyError as err:
            await message.answer('–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö!\n{}'.format(err))


@dp.message_handler(content_types=['photo'])
async def scan_photo(message: types.Message):
    """–ü–æ–ª—É—á–∏—Ç—å id —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    telegram_id = message.from_user.id
    if telegram_id == config.ADMIN_ID:
        photo_id = message.photo[0].file_id
        await message.answer(photo_id)


@dp.message_handler(commands=["backup_all_data"])
async def command_backup_all_data(message: types.Message):
    """–ë—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ —à–∫–æ–ª—ã) –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–æ–≤ JSON"""
    user_id = message.from_user.id
    if user_id == config.ADMIN_ID:
        backup_users()
        backup_auto_schools()
        path_1 = path_to_users_backup()
        path_2 = path_to_auto_schools_backup()
        with open(path_1, 'rb') as users_json_file:
            await message.answer_document(users_json_file)
        with open(path_2, 'rb') as auto_schools_json_file:
            await message.answer_document(auto_schools_json_file)


@dp.message_handler(commands=["get_user_info"])
async def command_get_user_info(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    telegram_id = message.from_user.id
    if telegram_id == config.ADMIN_ID:
        await message.answer('–ù–∞–ø–∏—à–∏ –∏–ª–∏ –ø—Ä–∏—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        await AllStates.InfoAboutUser.set()


@dp.message_handler(state=AllStates.InfoAboutUser, content_types=types.ContentTypes.TEXT)
async def command_get_user_info_action(message: types.Message, state: FSMContext):
    try:
        user_info = f'ID: {message.forward_from.id}\n' \
                    f'–ò–º—è: {message.forward_from.full_name}\n' \
                    f'–ù–∏–∫: @{message.forward_from.username}'
    except AttributeError:
        await message.answer(GIFT_CERTIFICATE['identification_error_RU'])
    else:
        await message.answer(user_info)
    finally:
        await state.finish()


@dp.message_handler(commands=["donate"])
async def command_donate(message: types.Message):
    """–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ + –∫–∞—Ä—Ç–∞ —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    telegram_id = message.from_user.id
    user_language = get_user_language(telegram_id)
    image_code = IMAGES['roadmap']

    markup = types.InlineKeyboardMarkup()
    button_text = BUTTONS[f'help_project_{user_language}']
    ref_link = types.InlineKeyboardButton(text=button_text, url=config.DONATE_URL)
    markup.add(ref_link)

    if not config.DEBUG:
        await bot.send_photo(telegram_id, image_code)
    await message.answer(ROADMAP[f'roadmap_text_{user_language}'], reply_markup=markup)


@dp.message_handler(commands=["certificate"])
async def command_certificate(message: types.Message):
    """–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É —Ç–∞—Ä–∏—Ñ–∞ –ü—Ä–µ–º–∏—É–º Max"""
    telegram_id = message.from_user.id
    user_language = get_user_language(telegram_id)
    await message.answer(MESSAGE.get(f'function_error_{user_language}'))


@dp.message_handler()
async def simple_message(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"""
    telegram_id = message.from_user.id
    user_language = get_user_language(telegram_id)
    commands = COMMANDS_DESCRIPTIONS.get(user_language, 'ALL')
    text = [f"/{key} - {value}" for (key, value) in commands.items() if key != 'language_code']
    await message.answer("\n".join(text))


if __name__ == "__main__":
    from handlers import dp
    executor.start_polling(dp, skip_updates=True)
